import os, getpass, random, threading, time
from GangaTest.Framework.tests import GangaGPITestCase, ICheckTest, MultipassTest
from Ganga.Core.GangaRepository.GangaRepositoryXML import GangaRepositoryLocal
from GangaTest.Lib.TestObjects import TestGangaObject
from Ganga.Core.GangaRepository.Registry import makeRepository, Registry
from Ganga.Core.GangaRepository import RegistryLockError
from Ganga.GPIDev.Base.Proxy import stripProxy
import sys

import Ganga.Utility.Config
config = Ganga.Utility.Config.getConfig('Configuration')
from Ganga.Runtime.Repository_runtime import getLocalRoot
location = getLocalRoot()
type = config['repositorytype']

from Ganga.Utility.logging import getLogger
logger = getLogger(modulename=True)

class HammerThread(threading.Thread):
    def __init__(self,id,reg):
        self.id = id
        self.reg = reg
        self.rng = random.Random()
        self.owned_ids = []
        self.owned_objs = {}
        self.done = False
        super(HammerThread, self).__init__()

    def updown(self):
        logger.info(str(self.id) + " shutdown()")
        self.reg.shutdown()
        logger.info(str(self.id) + " shutdown() done!")
        self.owned_ids = []
        logger.info(str(self.id) + " startup()")
        self.reg.startup()
        logger.info(str(self.id) + " startup() done!")
       
    def uindex(self):
        logger.info(str(self.id) + " update_index(None)" )
        self.reg.ids()
        logger.info(str(self.id) + " update_index(None) done!" )

    def add(self):
        logger.info("self.ref.keys before: %s" % self.reg.keys())
        objs = [TestGangaObject("HT%i"%(self.id)) for i in range(self.rng.randint(1,2))]
        logger.info(str(self.id) + " add(%s)"%objs)
        ids = []
        count = 1
        logger.info("Adding #%s Objs" % str(len(objs)))
        for obj in objs:
            logger.info("\n\n\nAdding #%s of #%s Object(s)" % (count, str(len(objs))))
            ids.append(self.reg._add(obj))
            logger.info("Added as : %s" % str(ids[-1]))
            assert(ids[-1] == obj.id)
            self.owned_objs[obj.id] = obj
            logger.info("Count: %s\n\n" % str(count))
            count += 1

        #ids = [self.reg._add(obj) for obj in objs]
        logger.info(str(self.id) + " add(%s) done, ids = %s!"%(objs, ids))
        assert len(ids) == len(objs)
        # TODO: Check if objects stay the same
        self.owned_ids.extend(ids)
        logger.info("self.reg.keys after: %s" % self.reg.keys())

    def delete(self):
        _ids = self.reg.ids()
        logger.info("delete self.reg.keys start: %s" % str(self.reg.keys()))
        if len(_ids) == 0:
            return
        n = min(len(self.reg.keys()),self.rng.randint(1,2))
        ids = self.rng.sample(self.reg.keys(),n)
        logger.info(str(self.id) + " delete(%s)"%ids)
        for id in ids:
            logger.debug("Removing: %s" % str(id))
            try:
                logger.debug("reg_id: %s" % str(stripProxy(self.reg[id]).id))
            except:
                pass
            obj_to_remove = self.reg[id]
            self.reg._remove(obj_to_remove)
            logger.info("Finished Remove\n\n")
        #[self.reg._remove(self.reg[id]) for id in ids]
        for id in ids:
            logger.info("keys: %s" % str(self.reg.keys()))
            logger.info("testing: %s" % str(id))
            assert not id in self.reg.keys()
            try:
                self.owned_ids.remove(id)
                del self.owned_os[id]
            except:
                pass
        logger.info(str(self.id) + " delete(%s) done!"%ids)
        logger.info("delete self.reg.keys end: %s" % str(self.reg.keys()))


    def load(self):
        ids = self.reg.ids()
        if len(ids) == 0:
            return
        id = self.rng.sample(ids,1)[0]
        logger.info(str(self.id) + " load(%s)"%id)
        try:
            stripProxy(self.owned_objs[id]._getReadAccess())
            #logger.info("Looking at: %s" % str(self.owned_objs[id]))
            #logger.info("stripped: %s" % str(stripProxy(self.owned_objs[id])))
            assert self.reg[id].name.startswith("HT")
            if id in self.owned_ids:
                assert self.reg[id].name == "HT%i"%(self.id), "{0} == {1}".format(self.reg[id].name, "HT%i"%(self.id))
        except KeyError: # If the object has been deleted in the meantime, it must be gone from the registry
            assert not id in self.reg.ids()
            logger.info(str(self.id) + "  %s deleted after KeyError (as per specification)" % id)
        logger.info(str(self.id) + " load(%s) done!"%id)

    def lock(self):
        ids = self.reg.ids()
        if len(ids) == 0:
            return
        id = self.rng.sample(ids,1)[0]
        logger.info(str(self.id) + " lock(%s)"%id)
        try:
            stripProxy(self.owned_objs[id])._getReadAccess()
            stripProxy(self.owned_objs[id])._getWriteAccess()
            assert self.reg[id].name.startswith("HT")
            self.reg[id].name = "HT%i"%(self.id)
            if not id in self.owned_ids:
                self.owned_ids.append(id)
        except KeyError: # If the object has been deleted in the meantime, it must be gone from the registry
            logger.info(str(self.id)+ "  %s deleted after KeyError (as per specification)" % id)
            assert not id in self.reg
        except RegistryLockError: # ok, this is already locked
            logger.info(str(self.id) + "  %s was locked..." % id)
        logger.info(str(self.id) + " lock(%s) done!"%id)

    def unlock(self):
        if len(self.owned_ids) == 0:
            return
        id = self.rng.sample(self.owned_ids,1)[0]
        logger.info(str(self.id) + " unlock(%s)"%id)
        obj_to_unlock = self.owned_objs[id]
        assert obj_to_unlock.name.startswith("HT")
        #self.reg[id].name = "HT-unlocked"
        #self.owned_ids.remove(id)
        self.reg._release_lock(self.reg[id])
        logger.info(str(self.id) + " unlock(%s) done!"%id)


    def run(self):
        for i in range(1000):
            choices = []
            choices.extend([self.updown]*1)
            choices.extend([self.uindex]*1)
            choices.extend([self.add]*10)
            choices.extend([self.delete]*10)
            choices.extend([self.load]*10)
            choices.extend([self.lock]*10)
            choices.extend([self.unlock]*5)
            #choices.extend([self.flush]*2)
            this_choice = self.rng.choice(choices)
            logger.debug("\n\n\n\n\n%s) This Choise: %s\n" % (str(i),str(this_choice)))
            this_choice()
            assert len(self.owned_ids) == len(dict(zip(self.owned_ids,range(len(self.owned_ids)))).keys())
            for id in self.owned_ids:
                if not id in self.reg._objects:
                    logger.info("LOCKED ID DELETED: " + str(id))
                    assert False

            logger.info("\n\nChecking Object consistency")
            try:
                self.reg._checkObjects()
                logger.info("PASSED")
            except:
                logger.error("FAILED")
                raise

        self.done = True

class TestRegistry(MultipassTest):
    def __init__(self): MultipassTest.__init__(self,2)

    def pass1(self):
        t = TestReg(1)
        while not t.isReadyForCheck():
            pass
        return t.checkTest()

    def pass2(self):
        t = TestReg(2)
        while not t.isReadyForCheck():
            pass
        return t.checkTest()


class TestReg(ICheckTest):
    def __init__(self, id):
        self.id = id
        self.registry = Registry("TestRegistry_%s" % id, "TestRegistry_%s" % id)
        self.registry.type = type
        self.registry.location = location
        logger.info(str(id) + " startup()")
        self.registry.startup()
        logger.info(str(id) + " startup() done!")
        logger.info("RUNNING HAMMERTHREAD #%s on direcory %s" % (id, location))
        self.thread = HammerThread(id, self.registry)
        self.thread.start()

    def isReadyForCheck(self):
        return self.thread.done or not self.thread.isAlive()

    def checkTest(self):
        self.thread.join()
        assert self.thread.done
        logger.info(str(self.id) + " shutdown()")
        self.registry.shutdown()
        logger.info(str(self.id) + " shutdown() done!")
        pass

    def cleanup(self):
        pass

